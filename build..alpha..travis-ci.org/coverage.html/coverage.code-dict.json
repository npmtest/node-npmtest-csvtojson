{"/home/travis/build/npmtest/node-npmtest-csvtojson/test.js":"/* istanbul instrument in package npmtest_csvtojson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-csvtojson/lib.npmtest_csvtojson.js":"/* istanbul instrument in package npmtest_csvtojson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_csvtojson = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_csvtojson = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-csvtojson/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-csvtojson && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_csvtojson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_csvtojson\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_csvtojson.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_csvtojson.rollup.js'] =\n            local.assetsDict['/assets.npmtest_csvtojson.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_csvtojson.__dirname +\n                    '/lib.npmtest_csvtojson.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/index.js":"module.exports = require(\"./libs/csv2json.js\");","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/csv2json.js":"//deprecated but leave it for backword compatibility\nmodule.exports.core=require(\"./core\");\n\n//live apis\nmodule.exports=require(\"./core\");\nmodule.exports.interfaces = require(\"./interfaces\");\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/index.js":"module.exports=constructor;\nmodule.exports.Converter = require(\"./Converter.js\");\n// module.exports.Parser = require(\"./parser.js\");\n// module.exports.parserMgr = require(\"./parserMgr.js\");\n\n\nfunction constructor(param,options){\n  return new module.exports.Converter(param,options)\n}","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/Converter.js":"var util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\nvar os = require(\"os\");\nvar eol = os.EOL;\n// var Processor = require(\"./Processor.js\");\nvar defParam = require(\"./defParam\");\nvar csvline = require(\"./csvline\");\nvar fileline = require(\"./fileline\");\nvar dataToCSVLine = require(\"./dataToCSVLine\");\nvar fileLineToCSVLine = require(\"./fileLineToCSVLine\");\nvar linesToJson = require(\"./linesToJson\");\nvar CSVError = require(\"./CSVError\");\nvar workerMgr = require(\"./workerMgr\");\nfunction Converter(params, options) {\n  Transform.call(this, options);\n  _param = defParam(params);\n  this._options = options || {};\n  this.param = _param;\n  this.param._options = this._options;\n  // this.resultObject = new Result(this);\n  // this.pipe(this.resultObject); // it is important to have downstream for a transform otherwise it will stuck\n  this.started = false;//indicate if parsing has started.\n  this.recordNum = 0;\n  this.lineNumber = 0; //file line number\n  this._csvLineBuffer = \"\";\n  this.lastIndex = 0; // index in result json array\n  //this._pipe(this.lineParser).pipe(this.processor);\n  // this.initNoFork();\n  if (this.param.forked) {\n    this.param.forked = false;\n    this.workerNum = 2;\n  }\n  this.flushCb = null;\n  this.processEnd = false;\n  this.sequenceBuffer = [];\n  this._needJson = null;\n  this._needEmitResult = null;\n  this._needEmitFinalResult = null;\n  this._needEmitJson = null;\n  this._needPush = null;\n  this._needEmitCsv = null;\n  this._csvTransf = null;\n  this.finalResult = [];\n  // this.on(\"data\", function() {});\n  this.on(\"error\", emitDone(this));\n  this.on(\"end\", emitDone(this));\n  this.initWorker();\n  process.nextTick(function () {\n    if (this._needEmitFinalResult === null) {\n      this._needEmitFinalResult = this.listeners(\"end_parsed\").length > 0\n    }\n    if (this._needEmitResult === null) {\n      this._needEmitResult = this.listeners(\"record_parsed\").length > 0\n    }\n    if (this._needEmitJson === null) {\n      this._needEmitJson = this.listeners(\"json\").length > 0\n    }\n    if (this._needEmitCsv === null) {\n      this._needEmitCsv = this.listeners(\"csv\").length > 0\n    }\n    if (this._needJson === null) {\n      this._needJson = this._needEmitJson || this._needEmitFinalResult || this._needEmitResult || this.transform || this._options.objectMode;\n    }\n    if (this._needPush === null) {\n      this._needPush = this.listeners(\"data\").length > 0 || this.listeners(\"readable\").length > 0\n      // this._needPush=false;\n    }\n    this.param._needParseJson = this._needJson || this._needPush;\n\n\n  }.bind(this))\n  return this;\n}\nutil.inherits(Converter, Transform);\nfunction emitDone(conv) {\n  return function (err) {\n    process.nextTick(function () {\n      conv.emit('done', err)\n    })\n  }\n}\nConverter.prototype._transform = function (data, encoding, cb) {\n  if (this.param.toArrayString && this.started === false) {\n    this.started = true;\n    if (this._needPush) {\n      this.push(\"[\" + eol, \"utf8\");\n    }\n  }\n  data = data.toString(\"utf8\");\n  var self = this;\n  this.preProcessRaw(data, function (d) {\n    if (d && d.length > 0) {\n      self.processData(self.prepareData(d), cb);\n    } else {\n      cb();\n    }\n  })\n};\nConverter.prototype.prepareData = function (data) {\n  return this._csvLineBuffer + data;\n}\nConverter.prototype.setPartialData = function (d) {\n  this._csvLineBuffer = d;\n}\nConverter.prototype.processData = function (data, cb) {\n  var params = this.param;\n  if (params.ignoreEmpty && !params._headers) {\n    data = data.trimLeft();\n  }\n  var fileLines = fileline(data, this.param)\n  if (fileLines.lines.length > 0) {\n    if (this.preProcessLine && typeof this.preProcessLine === \"function\") {\n      fileLines.lines = this._preProcessLines(fileLines.lines, this.lastIndex)\n    }\n    if (!params._headers) { //header is not inited. init header\n      this.processHead(fileLines, cb);\n    } else {\n      if (params.workerNum <= 1) {\n        var lines = fileLineToCSVLine(fileLines, params);\n        this.setPartialData(lines.partial);\n        var jsonArr = linesToJson(lines.lines, params, this.recordNum);\n        this.processResult(jsonArr)\n        this.lastIndex += jsonArr.length;\n        this.recordNum += jsonArr.length;\n        cb();\n      } else {\n        this.workerProcess(fileLines, cb);\n      }\n    }\n  } else {\n    this.setPartialData(fileLines.partial)\n    cb();\n  }\n}\nConverter.prototype._preProcessLines = function (lines, startIdx) {\n  var rtn = []\n  for (var i = 0; i < lines.length; i++) {\n    var result = this.preProcessLine(lines[i], startIdx + i + 1)\n    if (typeof result === \"string\") {\n      rtn.push(result)\n    } else {\n      rtn.push(lines[i])\n      this.emit(\"error\", new Error(\"preProcessLine should return a string but got: \" + JSON.stringify(result)))\n    }\n  }\n  return rtn\n}\nConverter.prototype.initWorker = function () {\n  var workerNum = this.param.workerNum - 1;\n  if (workerNum > 0) {\n    this.workerMgr = workerMgr();\n    this.workerMgr.initWorker(workerNum, this.param);\n  }\n}\nConverter.prototype.preRawData = function (func) {\n  this.preProcessRaw = func;\n  return this;\n}\nConverter.prototype.preFileLine = function (func) {\n  this.preProcessLine = func;\n  return this;\n}\n/**\n * workerpRocess does not support embeded multiple lines. \n */\n\nConverter.prototype.workerProcess = function (fileLine, cb) {\n  var self = this;\n  var line = fileLine\n  var eol = this.getEol()\n  this.setPartialData(line.partial)\n  this.workerMgr.sendWorker(line.lines.join(eol) + eol, this.lastIndex, cb, function (results, lastIndex) {\n    var cur = self.sequenceBuffer[0];\n    if (cur.idx === lastIndex) {\n      cur.result = results;\n      var records = [];\n      while (self.sequenceBuffer[0] && self.sequenceBuffer[0].result) {\n        var buf = self.sequenceBuffer.shift();\n        records = records.concat(buf.result)\n      }\n      self.processResult(records)\n      self.recordNum += records.length;\n    } else {\n      for (var i = 0; i < self.sequenceBuffer.length; i++) {\n        var buf = self.sequenceBuffer[i];\n        if (buf.idx === lastIndex) {\n          buf.result = results;\n          break;\n        }\n      }\n    }\n    // self.processResult(JSON.parse(results),function(){},true);\n  })\n  this.sequenceBuffer.push({\n    idx: this.lastIndex,\n    result: null\n  });\n  this.lastIndex += line.lines.length;\n}\nConverter.prototype.processHead = function (fileLine, cb) {\n  var params = this.param;\n  if (!params._headers) { //header is not inited. init header\n    var lines = fileLineToCSVLine(fileLine, params);\n    this.setPartialData(lines.partial);\n    if (params.noheader) {\n      if (params.headers) {\n        params._headers = params.headers;\n      } else {\n        params._headers = [];\n      }\n    } else {\n      var headerRow = lines.lines.shift();\n      if (params.headers) {\n        params._headers = params.headers;\n      } else {\n        params._headers = headerRow;\n      }\n    }\n    if (this.param.workerNum > 1) {\n      this.workerMgr.setParams(params);\n    }\n    var res = linesToJson(lines.lines, params, 0);\n    this.processResult(res);\n    this.lastIndex += res.length;\n    this.recordNum += res.length;\n    cb();\n  } else {\n    cb();\n  }\n}\nConverter.prototype.processResult = function (result) {\n\n  for (var i = 0; i < result.length; i++) {\n    var r = result[i];\n    if (r.err) {\n      this.emit(\"error\", r.err);\n    } else {\n      this.emitResult(r);\n    }\n  }\n  // this.lastIndex+=result.length;\n  // cb();\n}\n\nConverter.prototype.emitResult = function (r) {\n  var index = r.index;\n  var row = r.row;\n  var result = r.json;\n  var resultJson = null;\n  var resultStr = null;\n  if (typeof result === \"string\") {\n    resultStr = result;\n  } else {\n    resultJson = result;\n  }\n  if (resultJson === null && this._needJson) {\n    resultJson = JSON.parse(resultStr)\n    if (typeof row === \"string\") {\n      row = JSON.parse(row)\n    }\n  }\n  if (this.transform && typeof this.transform === \"function\") {\n    this.transform(resultJson, row, index);\n    resultStr = null;\n  }\n  if (this._needEmitJson) {\n    this.emit(\"json\", resultJson, index)\n  }\n  if (this._needEmitCsv) {\n    if (typeof row === \"string\") {\n      row = JSON.parse(row)\n    }\n    this.emit(\"csv\", row, index)\n  }\n  if (this.param.constructResult && this._needEmitFinalResult) {\n    this.finalResult.push(resultJson)\n  }\n  if (this._needEmitResult) {\n    this.emit(\"record_parsed\", resultJson, row, index);\n  }\n  if (this.param.toArrayString && index > 0 && this._needPush) {\n    this.push(\",\" + eol);\n  }\n  if (this._options && this._options.objectMode) {\n    this.push(resultJson);\n  } else {\n    if (this._needPush) {\n      if (resultStr === null) {\n        resultStr = JSON.stringify(resultJson)\n      }\n      this.push(!this.param.toArrayString ? resultStr + eol : resultStr, \"utf8\");\n    }\n  }\n}\n\nConverter.prototype.preProcessRaw = function (data, cb) {\n  cb(data);\n}\n\nConverter.prototype.preProcessLine = function (line, lineNumber) {\n  return line;\n}\nConverter.prototype._flush = function (cb) {\n  var self = this;\n  this.flushCb = function () {\n    self.emit(\"end_parsed\", self.finalResult);\n    if (self.workerMgr) {\n      self.workerMgr.destroyWorker();\n    }\n    cb()\n    if (!self._needPush) {\n      self.emit(\"end\")\n    }\n  };\n  if (this._csvLineBuffer.length > 0) {\n    if (this._csvLineBuffer[this._csvLineBuffer.length - 1] != this.getEol()) {\n      this._csvLineBuffer += this.getEol();\n    }\n    this.processData(this._csvLineBuffer, function () {\n      this.checkAndFlush();\n    }.bind(this));\n  } else {\n    this.checkAndFlush();\n  }\n  return;\n};\n// Converter.prototype._transformFork = function(data, encoding, cb) {\n//   this.child.stdin.write(data, encoding, cb);\n// }\n// Converter.prototype._flushFork = function(cb) {\n//   this.child.stdin.end();\n//   this.child.on(\"exit\", cb);\n// }\nConverter.prototype.checkAndFlush = function () {\n  if (this._csvLineBuffer.length !== 0) {\n    this.emit(\"error\", CSVError.unclosed_quote(this.recordNum, this._csvLineBuffer), this._csvLineBuffer);\n  }\n  if (this.param.toArrayString && this._needPush) {\n    this.push(eol + \"]\", \"utf8\");\n  }\n  if (this.workerMgr && this.workerMgr.isRunning()) {\n    this.workerMgr.drain = function () {\n      this.flushCb();\n    }.bind(this);\n  } else {\n    this.flushCb();\n  }\n}\nConverter.prototype.getEol = function (data) {\n  if (!this.param.eol && data) {\n    for (var i = 0; i < data.length; i++) {\n      if (data[i] === \"\\r\") {\n        if (data[i + 1] === \"\\n\") {\n          this.param.eol = \"\\r\\n\";\n        } else {\n          this.param.eol = \"\\r\";\n        }\n        return this.param.eol;\n      } else if (data[i] === \"\\n\") {\n        this.param.eol = \"\\n\";\n        return this.param.eol;\n      }\n    }\n    this.param.eol = eol;\n  }\n\n  return this.param.eol || eol;\n};\nConverter.prototype.fromFile = function (filePath, cb) {\n  var fs = require('fs');\n  var rs = null;\n  this.wrapCallback(cb, function () {\n    if (rs && rs.destroy) {\n      rs.destroy();\n    }\n  });\n  fs.exists(filePath, function (exist) {\n    if (exist) {\n      rs = fs.createReadStream(filePath);\n      rs.pipe(this);\n    } else {\n      this.emit('error', new Error(\"File not exist\"))\n    }\n  }.bind(this));\n  return this;\n}\nConverter.prototype.fromStream = function (readStream, cb) {\n  if (cb && typeof cb === \"function\") {\n    this.wrapCallback(cb);\n  }\n  readStream.pipe(this);\n  return this;\n}\nConverter.prototype.transf = function (func) {\n  this.transform = func;\n  return this;\n}\nConverter.prototype.fromString = function (csvString, cb) {\n  if (typeof csvString != \"string\") {\n    return cb(new Error(\"Passed CSV Data is not a string.\"));\n  }\n  if (cb && typeof cb === \"function\") {\n    this.wrapCallback(cb, function () {\n    });\n  }\n  process.nextTick(function () {\n    this.end(csvString)\n  }.bind(this))\n  return this;\n};\nConverter.prototype.wrapCallback = function (cb, clean) {\n\n  if (clean === undefined) {\n    clean = function () { }\n  }\n  if (cb && typeof cb === \"function\") {\n    this.once(\"end_parsed\", function (res) {\n      if (!this.hasError) {\n        cb(null, res);\n      }\n    }.bind(this));\n  }\n  this.once(\"error\", function (err) {\n    this.hasError = true;\n    if (cb && typeof cb === \"function\") {\n      cb(err);\n    }\n    clean();\n  }.bind(this));\n}\n\nmodule.exports = Converter;\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/defParam.js":"module.exports = function (params) {\n  var _param = {\n    constructResult: true, //set to false to not construct result in memory. suitable for big csv data\n    delimiter: ',', // change the delimiter of csv columns. It is able to use an array to specify potencial delimiters. e.g. [\",\",\"|\",\";\"]\n    ignoreColumns: [], // columns to ignore upon input.\n    includeColumns: [], // columns to include upon input.\n    quote: '\"', //quote for a column containing delimiter.\n    trim: true, //trim column's space charcters\n    checkType: false, //whether check column type\n    toArrayString: false, //stream down stringified json array instead of string of json. (useful if downstream is file writer etc)\n    ignoreEmpty: false, //Ignore empty value while parsing. if a value of the column is empty, it will be skipped parsing.\n    workerNum: getEnv(\"CSV_WORKER\", 1), //number of parallel workers. If multi-core CPU available, increase the number will get better performance for large csv data.\n    fork: false, //use another CPU core to convert the csv stream\n    noheader: false, //indicate if first line of CSV file is header or not.\n    headers: null, //an array of header strings. If noheader is false and headers is array, csv header will be ignored.\n    flatKeys: false, // Don't interpret dots and square brackets in header fields as nested object or array identifiers at all.\n    maxRowLength: 0, //the max character a csv row could have. 0 means infinite. If max number exceeded, parser will emit \"error\" of \"row_exceed\". if a possibly corrupted csv data provided, give it a number like 65535 so the parser wont consume memory. default: 0\n    checkColumn: false, //whether check column number of a row is the same as headers. If column number mismatched headers number, an error of \"mismatched_column\" will be emitted.. default: false\n    escape: '\"', //escape char for quoted column\n\n    /**below are internal params */\n    _headerType: [],\n    _headerTitle: [],\n    _headerFlag: [],\n    _headers: null,\n    _needFilterRow:false\n  };\n  if (!params) {\n    params = {};\n  }\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      _param[key] = params[key];\n    }\n  };\n  if (_param.ignoreColumns.length || _param.includeColumns.length){\n    _param._needFilterRow=true;\n    _param.ignoreColumns.sort(function (a, b) { return b - a; });\n  }\n  \n  return _param;\n}\n\n\nfunction getEnv(key, def) {\n  if (process.env[key]) {\n    return process.env[key];\n  } else {\n    return def;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/csvline.js":"var getEol=require(\"./getEol\");\nvar getDelimiter=require(\"./getDelimiter\");\nvar toLines=require(\"./fileline\");\nvar rowSplit=require(\"./rowSplit\");\n/**\n * Convert lines to csv columns\n * @param  {[type]} lines [file lines]\n * @param  {[type]} param [Converter param]\n * @return {[type]}  {lines:[[col1,col2,col3...]],partial:String}\n */\nmodule.exports=function(lines,param){\n  var csvLines=[];\n  var left=\"\";\n  while (lines.length){\n    var line=left+lines.shift();\n    var row=rowSplit(line,param);\n    if (row.closed){\n      csvLines.push(row.cols);\n      left=\"\";\n    }else{\n      left=line+getEol(line,param);\n    }\n  }\n  return {lines:csvLines,partial:left};\n}\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/getEol.js":"//return eol from a data chunk.\nvar eol=require(\"os\").EOL;\nmodule.exports=function(data,param){\n  if (!param.eol && data) {\n    for (var i=0;i<data.length;i++){\n      if (data[i]===\"\\r\"){\n        if (data[i+1] === \"\\n\"){\n          param.eol=\"\\r\\n\";\n        }else{\n          param.eol=\"\\r\";\n        }\n        return param.eol;\n      }else if (data[i]===\"\\n\"){\n        param.eol=\"\\n\";\n        return param.eol;\n      }\n    }\n    param.eol=eol;\n  }\n  return param.eol;\n}","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/getDelimiter.js":"module.exports=getDelimiter;\nvar defaulDelimiters=[\",\",\"|\",\"\\t\",\";\",\":\"];\nfunction getDelimiter(rowStr,param) {\n  var checker;\n  if (param.delimiter===\"auto\"){\n    checker=defaulDelimiters;\n  }else if (param.delimiter instanceof Array){\n    checker=param.delimiter;\n  }else{\n    return param.delimiter;\n  }\n  var count=0;\n  var rtn=\",\";\n  checker.forEach(function(delim){\n    var delimCount=rowStr.split(delim).length;\n    if (delimCount>count){\n      rtn=delim;\n      count=delimCount;\n    }\n  });\n  return rtn;\n}","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/fileline.js":"var getEol=require(\"./getEol\");\n/**\n * convert data chunk to file lines array\n * @param  {string} data  data chunk as utf8 string\n * @param  {object} param Converter param object\n * @return {Object}   {lines:[line1,line2...],partial:String}\n */\nmodule.exports=function(data,param){\n  var eol=getEol(data,param);\n  var lines= data.split(eol);\n  var partial=lines.pop();\n  // if (param.ignoreEmpty){\n  //   var trimmedLines=[];\n  //   for (var i=0;i<lines.length;i++){\n  //     trimmedLines.push(lines[i].trim())\n  //   }\n  //   return {lines:trimmedLines,partial:partial};\n  // }else{\n    return {lines:lines,partial:partial};\n  // }\n}","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/rowSplit.js":"var getDelimiter = require(\"./getDelimiter\");\n/**\n * Convert a line of string to csv columns according to its delimiter\n * @param  {[type]} rowStr [description]\n * @param  {[type]} param  [Converter param]\n * @return {[type]}        {cols:[\"a\",\"b\",\"c\"],closed:boolean} the closed field indicate if the row is a complete row\n */\nmodule.exports = function rowSplit(rowStr, param) {\n  if (rowStr === \"\") {\n    return { cols: [], closed: true };\n  }\n  var quote = param.quote;\n  var trim = param.trim;\n  var escape = param.escape;\n  if (param.delimiter instanceof Array || param.delimiter.toLowerCase() === \"auto\") {\n    param.delimiter = getDelimiter(rowStr, param);\n  }\n  var delimiter = param.delimiter;\n  var rowArr = rowStr.split(delimiter);\n  if (quote === \"off\") {\n    return { cols: rowArr, closed: true };\n  }\n  var row = [];\n  var inquote = false;\n  var quoteBuff = '';\n  for (var i = 0; i < rowArr.length; i++) {\n    var e = rowArr[i];\n    if (!inquote && trim) {\n      e = e.trim();\n    }\n    var len = e.length;\n    if (!inquote) {\n      if (isQuoteOpen(e, param)) { //quote open\n        e = e.substr(1);\n        if (isQuoteClose(e, param)) { //quote close\n          e = e.substring(0, e.length - 1);\n          e = _escapeQuote(e, quote, escape);;\n          row.push(e);\n          continue;\n        } else {\n          inquote = true;\n          quoteBuff += e;\n          continue;\n        }\n      } else {\n        row.push(e);\n        continue;\n      }\n    } else { //previous quote not closed\n      if (isQuoteClose(e, param)) { //close double quote\n        inquote = false;\n        e = e.substr(0, len - 1);\n        quoteBuff += delimiter + e;\n        quoteBuff = _escapeQuote(quoteBuff, quote, escape);\n        if (trim) {\n          quoteBuff = quoteBuff.trimRight();\n        }\n        row.push(quoteBuff);\n        quoteBuff = \"\";\n      } else {\n        quoteBuff += delimiter + e;\n      }\n    }\n  }\n\n  if (!inquote && param._needFilterRow) {\n    row = filterRow(row, param);\n  }\n\n  return { cols: row, closed: !inquote };\n  // if (param.workerNum<=1){\n  // }else{\n  //   if (inquote && quoteBuff.length>0){//for multi core, quote will be closed at the end of line\n  //     quoteBuff=_escapeQuote(quoteBuff,quote,escape);;\n  //     if (trim){\n  //       quoteBuff=quoteBuff.trimRight();\n  //     }\n  //     row.push(quoteBuff);\n  //   }\n  //   return {cols:row,closed:true};\n  // }\n\n}\nfunction filterRow(row, param) {\n  if (param.ignoreColumns instanceof Array && param.ignoreColumns.length > 0) {\n    for (var irow = 0; irow < param.ignoreColumns.length; irow++) {\n      if (param.ignoreColumns[irow] >= 0) {\n        row.splice(param.ignoreColumns[irow], 1);\n      }\n    }\n  }\n  if (param.includeColumns instanceof Array && param.includeColumns.length > 0) {\n    var cleanRowArr = [];\n    for (var irow = 0; irow < param.includeColumns.length; irow++) {\n      if (param.includeColumns[irow] >= 0) {\n        cleanRowArr.push(row[param.includeColumns[irow]]);\n      }\n    }\n    row = cleanRowArr;\n  }\n  return row;\n}\nfunction isQuoteOpen(str, param) {\n  var quote = param.quote;\n  var escape = param.escape;\n  return str[0] === quote && (\n    str[1] !== quote ||\n    str[1] === escape && (str[2] === quote || str.length === 2));\n}\nfunction isQuoteClose(str, param) {\n  var quote = param.quote;\n  var count = 0;\n  var idx = str.length - 1;\n  var escape = param.escape;\n  while (str[idx] === quote || str[idx] === escape) {\n    idx--;\n    count++;\n  }\n  return count % 2 !== 0;\n}\nfunction twoDoubleQuote(str, quote) {\n  var twoQuote = quote + quote;\n  var curIndex = -1;\n  while ((curIndex = str.indexOf(twoQuote, curIndex)) > -1) {\n    str = str.substring(0, curIndex) + str.substring(++curIndex);\n  }\n  return str;\n}\nvar cachedRegExp = {}\nfunction _escapeQuote(segment, quote, escape) {\n\n  var key = \"es|\" + quote + \"|\" + escape;\n  if (cachedRegExp[key] === undefined) {\n    if (escape === \"\\\\\") {\n      escape = \"\\\\\\\\\";\n    }\n    cachedRegExp[key] = new RegExp(escape + quote, 'g');\n  }\n  var regExp = cachedRegExp[key];\n  return segment.replace(regExp, quote);\n}\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/dataToCSVLine.js":"var fileline=require(\"./fileline\");\nvar csvline=require(\"./csvline\");\n/**\n * Convert data chunk to csv lines with cols\n * @param  {[type]} data   [description]\n * @param  {[type]} params [description]\n * @return {[type]}    {lines:[[col1,col2,col3]],partial:String}\n */\nmodule.exports=function(data,params){\n    var line=fileline(data,params);\n    var lines=line.lines;\n    var csvLines=csvline(lines,params);\n    return {\n      lines:csvLines.lines,\n      partial:csvLines.partial+line.partial\n    }\n}","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/fileLineToCSVLine.js":"var csvline=require(\"./csvline\");\n/**\n * Convert data chunk to csv lines with cols\n * @param  {[type]} data   [description]\n * @param  {[type]} params [description]\n * @return {[type]}    {lines:[[col1,col2,col3]],partial:String}\n */\nmodule.exports=function(fileLine,params){\n    var lines=fileLine.lines;\n    var csvLines=csvline(lines,params);\n    return {\n      lines:csvLines.lines,\n      partial:csvLines.partial+fileLine.partial\n    }\n}","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/linesToJson.js":"var parserMgr = require(\"./parserMgr.js\");\nvar Parser = require(\"./parser\");\nvar CSVError = require(\"./CSVError\");\nvar numReg = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/;\n/**\n * Convert lines of csv array into json\n * @param  {[type]} lines  [[col1,col2,col3]]\n * @param  {[type]} params Converter params with _headers field populated\n * @param  {[type]} idx start pos of the lines\n * @return {[type]}   [{err:null,json:obj,index:line,row:[csv row]}]\n */\nmodule.exports = function (lines, params, idx) {\n  if (params._needParseJson) {\n    if (!params._headers) {\n      params._headers = [];\n    }\n    if (!params.parseRules) {\n      var row = params._headers;\n      params.parseRules = parserMgr.initParsers(row, params);\n    }\n    return processRows(lines, params, idx);\n  } else {\n    return justReturnRows(lines, params, idx);\n  }\n}\n\nfunction justReturnRows(lines, params, idx) {\n  var rtn = [];\n  for (var i = 0; i < lines.length; i++) {\n    rtn.push({\n      err: null,\n      json: {},\n      index: idx++,\n      row: lines[i]\n    })\n  }\n  return rtn;\n}\nfunction processRows(csvRows, params, startIndex) {\n  var count = csvRows.length;\n  var res = [];\n  for (var i = 0; i < csvRows.length; i++) {\n    var r = processRow(csvRows[i], params, startIndex++);\n    if (r) {\n      res.push(r);\n    }\n  }\n  return res;\n}\nfunction getConstParser(number, param) {\n  var inst = new Parser(\"field\" + number, /.*/, function (params) {\n    var name = this.getName();\n    params.resultRow[name] = params.item;\n  }, true);\n  inst.setParam(param);\n  return inst;\n}\nfunction processRow(row, param, index) {\n  var i, item, parser, head;\n  var parseRules = param.parseRules;\n  if (param.checkColumn && row.length != parseRules.length) {\n    return {\n      err: CSVError.column_mismatched(index)\n    }\n  }\n\n\n  var headRow = param._headers;\n  var resultRow = convertRowToJson(row, headRow, param);\n  if (resultRow) {\n    return {\n      json: resultRow,\n      index: index,\n      row: row\n    };\n  } else {\n    return null;\n  }\n}\nfunction convertRowToJson(row, headRow, param) {\n  var hasValue = false;\n  var resultRow = {};\n  for (i = 0; i < row.length; i++) {\n\n    item = row[i];\n\n    if (param.ignoreEmpty && item === '') {\n      continue;\n    }\n    hasValue = true;\n\n    // parser = parseRules[i];\n    // if (!parser) {\n    //   parser = parseRules[i] = getConstParser(i + 1, param);\n    // }\n    head = headRow[i];\n    if (!head || head === \"\") {\n      head = headRow[i] = \"field\" + (i + 1);\n      // parser.initHead(head);\n    }\n    var flag = getFlag(head, i, param)\n    if (flag === 'omit') {\n      continue\n    }\n    if (param.checkType) {\n      convertFunc = checkType(item, head, i, param)\n      item = convertFunc(item)\n    }\n    var title = getTitle(head, i, param)\n    if (flag === 'flat' || param.flatKeys) {\n      resultRow[title] = item\n    } else {\n      setPath(resultRow, title, item)\n    }\n    // _.set(resultRow,head,item)\n    // parser.parse({\n    //   head: head,\n    //   item: item,\n    //   itemIndex: i,\n    //   rawRow: row,\n    //   resultRow: resultRow,\n    //   rowIndex: index,\n    //   config: param || {}\n    // });\n  }\n  if (hasValue) {\n    return resultRow\n  } else {\n    return false\n  }\n}\n\nfunction setPath(json, path, value) {\n  var _set = require('lodash/set')\n  var pathArr = path.split('.')\n  if (pathArr.length === 1) {\n    json[path] = value;\n  } else {\n    _set(json, path, value)\n  }\n}\nfunction getFlag(head, i, param) {\n  if (typeof param._headerFlag[i] === \"string\") {\n    return param._headerFlag[i]\n  } else {\n    if (head.indexOf('*omit*') > -1) {\n      return param._headerFlag[i] = 'omit'\n    } else if (head.indexOf('*flat*') > -1) {\n      return param._headerFlag[i] = 'flat'\n    } else {\n      return param._headerFlag[i] = ''\n    }\n  }\n}\nfunction getTitle(head, i, param) {\n  if (param._headerTitle[i]) {\n    return param._headerTitle[i]\n  } else {\n    var flag = getFlag(head, i, param)\n    var str = head.replace(flag, '')\n    str = str.replace('string#!', '').replace('number#!', '')\n    return param._headerTitle[i] = str\n  }\n}\n\nfunction checkType(item, head, headIdx, param) {\n  if (param._headerType[headIdx]) {\n    return param._headerType[headIdx]\n  } else {\n    if (head.indexOf('number#!') > -1) {\n      return param._headerType[headIdx] = numberType\n    } else if (head.indexOf('string#!') > -1) {\n      return param._headerType[headIdx] = stringType\n    } else if (param.checkType) {\n      return param._headerType[headIdx] = dynamicType\n    } else {\n      return param._headerType[headIdx] = stringType\n    }\n  }\n}\n\nfunction numberType(item) {\n  var rtn = parseFloat(item)\n  if (isNaN(rtn)) {\n    return item;\n  }\n  return rtn;\n}\n\nfunction stringType(item) {\n  return item.toString();\n}\n\nfunction dynamicType(item) {\n  var trimed = item.trim();\n  if (trimed === \"\") {\n    return stringType(item);\n  }\n  if (numReg.test(trimed)) {\n    return numberType(item)\n  } else if (trimed.length === 5 && trimed.toLowerCase() === \"false\" || trimed.length === 4 && trimed.toLowerCase() === \"true\") {\n    return booleanType(item);\n  } else if (trimed[0] === \"{\" && trimed[trimed.length - 1] === \"}\" || trimed[0] === \"[\" && trimed[trimed.length - 1] === \"]\") {\n    return jsonType(item);\n\n  } else {\n    return stringType(item);\n  }\n}\n\nfunction booleanType(item) {\n  var trimed = item.trim();\n  if (trimed.length === 5 && trimed.toLowerCase() === \"false\") {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction jsonType(item) {\n  try {\n    return JSON.parse(item);\n  } catch (e) {\n    return item;\n  }\n}\n// function dynamicType(item) {\n//   var trimed = item.trim();\n//   if (trimed === \"\") {\n//     return trimed;\n//   }\n//   if (!isNaN(trimed)) {\n//     return parseFloat(trimed);\n//   } else if (trimed.length === 5 && trimed.toLowerCase() === \"false\") {\n//     return false;\n//   } else if (trimed.length === 4 && trimed.toLowerCase() === \"true\") {\n//     return true;\n//   } else if (trimed[0] === \"{\" && trimed[trimed.length - 1] === \"}\" || trimed[0] === \"[\" && trimed[trimed.length - 1] === \"]\") {\n//     try {\n//       return JSON.parse(trimed);\n//     } catch (e) {\n//       return item;\n//     }\n//   } else {\n//     return item;\n\n//   }\n// }","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/parserMgr.js":"//implementation\nvar registeredParsers = [];\nvar Parser = require(\"./parser.js\");\nvar defaultParser = require(\"./defaultParsers\");\n\nfunction registerParser (parser) {\n  if (parser instanceof Parser && registeredParsers.indexOf(parser) === -1) {\n    registeredParsers.push(parser); // TODO indexOf doesn't work with object references\n  }\n}\nfunction getParser (columnTitle, param) {\n  var inst, parser;\n  function getParserByName (parserName) {\n    var parser;\n    registeredParsers.forEach(function(p){\n      if (p.getName() === parserName){\n        parser=p;\n      }\n    });\n    if (parser) {\n      var inst = parser.clone();\n      return inst;\n    }\n    return new Parser(); //TODO remove new\n  }\n  columnTitle = columnTitle ? columnTitle : '';\n  registeredParsers.forEach(function(p){\n    if (p.test(columnTitle)){\n      parser=p;\n    }\n  });\n  if (parser) {\n    inst = parser.clone();\n    inst.head = columnTitle;\n  } else {\n    inst = getParserByName(\"json\", columnTitle);\n  }\n  inst.setParam(param);\n  inst.initHead(columnTitle);\n  return inst;\n}\nfunction addParser (name, regExp, parseFunc) {\n  var parser = new Parser(name, regExp, parseFunc,false); //TODO remove new\n  registerParser(parser);\n}\nfunction addSafeParser(parserPath){\n  //TODO impl\n}\n\nfunction initParsers (row, param) {\n  var parsers = [];\n  row.forEach(function (columnTitle) {\n    parsers.push(getParser(columnTitle, param));\n  });\n  return parsers;\n}\ndefaultParser.forEach(function (parserCfg){\n  //TODO refactor this\n  addParser(parserCfg.name, parserCfg.regExp, parserCfg.parserFunc,parserCfg.processSafe);\n});\n\n//module interfaces\nmodule.exports.addParser = addParser;\nmodule.exports.initParsers = initParsers;\nmodule.exports.getParser = getParser;\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/parser.js":"var explicitTypes = [\"number\", \"string\"];\n\nfunction Parser(name, regExp, parser, processSafe) {\n  this.name = typeof name === \"undefined\" ? \"Default\" : name;\n  this.regExp = null;\n  this.type = \"\";\n  this.processSafe = processSafe;\n  if (typeof regExp !== \"undefined\") {\n    if (typeof regExp === \"string\") {\n      this.regExp = new RegExp(regExp);\n    } else {\n      this.regExp = regExp;\n    }\n  }\n  if (typeof parser !== \"undefined\") {\n    this.parse = parser;\n  }\n}\n// var numReg = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/;\nParser.prototype.convertType = function(item) {\n  var type=this.type;\n  if (type === 'number') {\n    var rtn = parseFloat(item);\n    if (isNaN(rtn)) {\n      return 0;\n    } else {\n      return rtn;\n    }\n  } else if (this.param && this.param.checkType && type === '') {\n    var trimed = item.trim();\n    if (trimed === \"\"){\n      return trimed;\n    }\n    if (!isNaN(trimed)) {\n      return parseFloat(trimed);\n    } else if (trimed.length === 5 && trimed.toLowerCase() === \"false\") {\n      return false;\n    } else if (trimed.length === 4 && trimed.toLowerCase() === \"true\") {\n      return true;\n    } else if (trimed[0] === \"{\" && trimed[trimed.length - 1] === \"}\" || trimed[0] === \"[\" && trimed[trimed.length - 1]===\"]\") {\n      try {\n        return JSON.parse(trimed);\n      } catch (e) {\n        return item;\n      }\n    } else {\n      return item;\n    }\n  }\n  return item;\n\n}\nParser.prototype.setParam = function(param) {\n  this.param = param;\n}\nParser.prototype.test = function(str) {\n  return this.regExp && this.regExp.test(str);\n};\nParser.prototype.parse = function(params) {\n  params.resultRow[params.head] = params.item;\n};\nParser.prototype.getHeadStr = function() {\n  if (this.headStr) {\n    return this.headStr;\n  } else {\n    var head = this.head;\n    this.headStr = head.replace(this.regExp, '');\n    if (!this.headStr) {\n      this.headStr = \"Unknown Header\";\n    }\n    return this.getHeadStr();\n  }\n};\nParser.prototype.getHead = function() {\n  return this.head;\n};\nParser.prototype.initHead = function(columnTitle) {\n  this.head = columnTitle;\n  var wholeHead = columnTitle.replace(this.regExp, '');\n  //init type && headStr\n  var splitArr = wholeHead.split(\"#!\");\n  if (splitArr.length === 1) { //no explicit type\n    this.headStr = splitArr[0];\n  } else {\n    var type = splitArr.shift();\n    if (explicitTypes.indexOf(type.toLowerCase()) > -1) {\n      this.type = type;\n      this.headStr = splitArr.join(\"#!\");\n    } else { //no explicit type\n      this.headStr = wholeHead;\n    }\n  }\n  if (!this.headStr) {\n    this.headStr = wholeHead ? wholeHead : \"Unknown Head\";\n  }\n\n}\nParser.prototype.clone = function() {\n  var obj = Object.create(this);\n  var newParser = new Parser();\n  for (var key in obj) {\n    newParser[key] = obj[key];\n  }\n  return newParser;\n  //return new Parser(this.name, this.regExp, this.parse, this.processSafe);\n};\nParser.prototype.getName = function() {\n  return this.name;\n};\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/defaultParsers/index.js":"module.exports = [\r\n  require('./parser_array.js'),\r\n  require('./parser_json.js'),\r\n  require('./parser_omit.js'),\r\n  require('./parser_jsonarray.js'),\r\n  require(\"./parser_flat.js\")\r\n];\r\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/defaultParsers/parser_array.js":"module.exports = {\r\n  \"name\": \"array\",\r\n  \"processSafe\":true,\r\n  \"regExp\": /^\\*array\\*/,\r\n  \"parserFunc\": function parser_array(params) {\r\n    var fieldName = params.head.replace(this.regExp, '');\r\n    if (params.resultRow[fieldName] === undefined) {\r\n      params.resultRow[fieldName] = [];\r\n    }\r\n    params.resultRow[fieldName].push(params.item);\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/defaultParsers/parser_json.js":"var arrReg = /\\[([0-9]*)\\]/;\n\n\nfunction processHead(pointer, headArr, arrReg, flatKeys) {\n  var headStr, match, index;\n  while (headArr.length > 1) {\n    headStr = headArr.shift();\n    // match = headStr.match(arrReg);\n    match = flatKeys ? false : headStr.match(arrReg);\n    if (match) { //if its array, we need add an empty json object into specified index.\n      if (pointer[headStr.replace(match[0], '')] === undefined) {\n        pointer[headStr.replace(match[0], '')] = [];\n      }\n      index = match[1]; //get index where json object should stay\n      pointer = pointer[headStr.replace(match[0], '')];\n      if (index === '') { //if its dynamic array index, push to the end\n        index = pointer.length;\n      }\n      if (!pointer[index]) { //current index in the array is empty. we need create a new json object.\n        pointer[index] = {};\n      }\n      pointer = pointer[index];\n    } else { //not array, just normal JSON object. we get the reference of it\n      if (pointer[headStr] === undefined) {\n        pointer[headStr] = {};\n      }\n      pointer = pointer[headStr];\n    }\n  }\n  return pointer;\n}\nmodule.exports = {\n  \"name\": \"json\",\n  \"processSafe\": true,\n  \"regExp\": /^\\*json\\*/,\n  \"parserFunc\": function parser_json(params) {\n    var fieldStr = this.getHeadStr();\n    var headArr = (params.config && params.config.flatKeys) ? [fieldStr] : fieldStr.split('.');\n    var match, index, key, pointer;\n    //now the pointer is pointing the position to add a key/value pair.\n    var pointer = processHead(params.resultRow, headArr, arrReg, params.config && params.config.flatKeys);\n    key = headArr.shift();\n    match = (params.config && params.config.flatKeys) ? false : key.match(arrReg);\n    if (match) { // the last element is an array, we need check and treat it as an array.\n      try {\n        key = key.replace(match[0], '');\n        if (!pointer[key] || !(pointer[key] instanceof Array)) {\n          pointer[key] = [];\n        }\n        if (pointer[key]) {\n          index = match[1];\n          if (index === '') {\n            index = pointer[key].length;\n          }\n          pointer[key][index] = params.item;\n        } else {\n          params.resultRow[fieldStr] = params.item;\n        }\n      } catch (e) {\n        params.resultRow[fieldStr] = params.item;\n      }\n    } else {\n      if (typeof pointer=== \"string\"){\n        params.resultRow[fieldStr] = params.item;\n      }else{\n        pointer[key] = params.item;\n      }\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/defaultParsers/parser_omit.js":"module.exports = {\r\n  \"name\": \"omit\",\r\n  \"regExp\": /^\\*omit\\*/,\r\n  \"processSafe\":true,\r\n  \"parserFunc\": function parser_omit() {}\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/defaultParsers/parser_jsonarray.js":"module.exports = {\r\n  \"name\": \"jsonarray\",\r\n  \"processSafe\":true,\r\n  \"regExp\": /^\\*jsonarray\\*/,\r\n  \"parserFunc\": function parser_jsonarray (params) {\r\n    var fieldStr = params.head.replace(this.regExp, \"\");\r\n    var headArr = fieldStr.split('.');\r\n    var pointer = params.resultRow;\r\n    while (headArr.length > 1) {\r\n      var headStr = headArr.shift();\r\n      if (pointer[headStr] === undefined) {\r\n        pointer[headStr] = {};\r\n      }\r\n      pointer = pointer[headStr];\r\n    }\r\n    var arrFieldName = headArr.shift();\r\n    if (pointer[arrFieldName] === undefined) {\r\n      pointer[arrFieldName] = [];\r\n    }\r\n    pointer[arrFieldName].push(params.item);\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/defaultParsers/parser_flat.js":"module.exports = {\n  \"name\": \"flat\",\n  \"processSafe\":true,\n  \"regExp\": /^\\*flat\\*/,\n  \"parserFunc\": function parser_flat (params) {\n     var key=this.getHeadStr();\n     var val=params.item;\n     params.resultRow[key]=val;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/CSVError.js":"var util=require(\"util\");\nmodule.exports=CSVError;\nfunction CSVError(err,index,extra){\n  Error.call(this,\"\");\n  this.err=err;\n  this.line=index;\n  this.extra=extra;\n  this.message=\"Error: \"+err+\". JSON Line number: \"+index+ (extra?\" near: \"+extra:\"\");\n  this.name=\"CSV Error\";\n}\nutil.inherits(CSVError,Error);\n\nCSVError.prototype.toString=function(){\n  return JSON.stringify([this.err,this.line,this.extra]);\n}\n\nCSVError.column_mismatched=function(index,extra){\n  return new CSVError(\"column_mismatched\",index,extra);\n}\n\nCSVError.unclosed_quote=function(index,extra){\n  return new CSVError(\"unclosed_quote\",index,extra);\n}\n\nCSVError.fromArray=function(arr){\n  return new CSVError(arr[0],arr[1],arr[2]);\n}","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/core/workerMgr.js":"module.exports=workerMgr;\nvar spawn=require(\"child_process\").spawn;\nvar eom=\"\\x03\"\nvar eom1=\"\\x0e\"\nvar eom2=\"\\x0f\"\nvar CSVError=require('./CSVError')\nfunction workerMgr(){\n\n  var exports={\n    initWorker:initWorker,\n    sendWorker:sendWorker,\n    setParams:setParams,\n    drain:function(){},\n    isRunning:isRunning,\n    destroyWorker:destroyWorker\n\n  }\n  var workers=[];\n  var running=0;\n  var waiting=null;\n  function initWorker(num,params){\n    workers=[];\n    running=0;\n    waiting=null;\n    for (var i=0;i<num;i++){\n      workers.push(new Worker(params));\n    }\n    \n  }\n  function isRunning(){\n    return running>0;\n  }\n  function destroyWorker(){\n    workers.forEach(function(w){\n      w.destroy();\n    });\n  }\n\n  function sendWorker(data,startIdx,transformCb,cbResult){\n    if (workers.length>0){\n      var worker=workers.shift();\n      running++;\n      worker.parse(data,startIdx,function(result){\n        // var arr=JSON.parse(result);\n        // arr.forEach(function(item){\n        //   console.log('idx',item.index)\n        // })\n        workers.push(worker)\n        cbResult(result,startIdx);\n        running--;\n        if (waiting === null && running===0){\n          exports.drain();\n        }else if (waiting){\n          sendWorker.apply(this,waiting)\n          waiting=null;\n        }\n      });\n      process.nextTick(transformCb)\n    }else{\n      waiting=[data,startIdx,transformCb,cbResult];\n    }\n  }\n\n  function setParams(params){\n    workers.forEach(function(w){\n      w.setParams(params);\n    });\n  }\n  return exports;\n}\n\nfunction Worker(params){\n  this.cp=spawn(process.execPath,[__dirname+\"/worker.js\"],{\n    env:{\n      child:true\n    },\n    stdio:['pipe','pipe',2,'ipc']\n    // stdio:[0,1,2,'ipc']\n  });\n  this.setParams(params);\n  this.cp.on(\"message\",this.onChildMsg.bind(this));\n  this.buffer=\"\";\n  var self=this;\n  this.cp.stdout.on(\"data\",function(d){\n    var str=d.toString(\"utf8\");\n     var all=self.buffer+str;\n      var cmdArr=all.split(eom)\n      while (cmdArr.length >1){\n        self.onChildMsg(cmdArr.shift());\n      }\n      self.buffer=cmdArr[0];\n  })\n}\n\nWorker.prototype.setParams=function(params){\n  var msg=\"0\"+JSON.stringify(params);\n  this.sendMsg(msg);\n}\n/**\n * msg is like:\n * <cmd><data>\n * cmd is from 0-9\n */\nWorker.prototype.onChildMsg=function(msg){\n  if (msg){\n  var cmd=msg[0];\n  var data=msg.substr(1);\n  switch (cmd){\n    case \"0\": //total line number of current chunk \n      if (this.cbLine){\n        var sp=data.split(\"|\");\n        var len=parseInt(sp[0]);\n        var partial=sp[1];\n        this.cbLine(len,partial);\n      }\n      break;\n    case \"1\": // json array of current chunk\n      if (this.cbResult){\n        var rows=data.split(eom1);\n        rows.pop();\n        var res=[];\n        rows.forEach(function(row){\n          var sp=row.split(eom2);\n          res.push({\n            index:sp[0],\n            row:sp[1],\n            err:sp[2]?CSVError.fromArray(JSON.parse(sp[2])):null,\n            json:sp[3]\n          }) \n        })\n        this.cbResult(res);\n      }\n      break;\n  }\n  }\n}\nWorker.prototype.parse=function(data,startIdx,cbResult){\n  this.cbResult=cbResult;\n  var msg=\"1\"+startIdx+\"|\"+data;\n  this.sendMsg(msg);\n}\nWorker.prototype.destroy=function(){\n  this.cp.kill();\n}\nWorker.prototype.sendMsg=function(msg){\n  this.cp.stdin.write(msg+eom,\"utf8\")\n  // this.cp.send(msg)\n}","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/interfaces/index.js":"module.exports.web=require(\"./web\");\nmodule.exports.cli=require(\"./cli\");","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/interfaces/web/index.js":"module.exports = require(\"./webServer.js\");","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/interfaces/web/webServer.js":"var http = require(\"http\");\nvar Converter = require(\"../../core/Converter.js\");\nfunction startWebServer (args) {\n    args = args || {};\n    var serverArgs = {\n        port: args.port || '8801',\n        urlpath: args.urlpath || '/parseCSV'\n    };\n    var server = http.createServer();\n    server.on(\"request\", function(req, res){\n        if (req.url === serverArgs.urlpath && req.method === \"POST\"){\n            req.pipe(new Converter({constructResult:false})).pipe(res);\n        } else {\n            res.end(\"Please post data to: \" + serverArgs.urlpath);\n        }\n    });\n\n    server.listen(serverArgs.port);\n    console.log(\"CSV Web Server Listen On:\" + serverArgs.port);\n    console.log(\"POST to \" + serverArgs.urlpath + \" with CSV data to get parsed.\");\n    return server;\n}\nmodule.exports.startWebServer = startWebServer;\n","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/interfaces/cli/index.js":"module.exports = require(\"./main.js\");","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/libs/interfaces/cli/main.js":"/**\n * Convert input to process stdout\n */\n\n//implementation\nvar Converter = require(\"../../core/Converter.js\");\nfunction _initConverter(){\n    var csvConverter = new Converter();\n    var started = false;\n    var writeStream = process.stdout;\n    csvConverter.on(\"record_parsed\",function(rowJSON){\n        if (started){\n            writeStream.write(\",\\n\");\n        }\n        writeStream.write(JSON.stringify(rowJSON));  //write parsed JSON object one by one.\n        if (started === false){\n            started = true;\n        }\n    });\n    writeStream.write(\"[\\n\"); //write array symbol\n\n    csvConverter.on(\"end_parsed\",function(){\n        writeStream.write(\"\\n]\"); //end array symbol\n    });\n    csvConverter.on(\"error\",function(err){\n        console.error(err);\n        process.exit(-1);\n    });\n    return csvConverter;\n}\nfunction convertFile(fileName){\n    var csvConverter=_initConverter();\n    csvConverter.from(fileName);\n}\n\nfunction convertString(csvString){\n    var csvConverter=_initConverter();\n    csvConverter.from(csvString);\n}\n//module interfaces\nmodule.exports.convertFile = convertFile;\nmodule.exports.convertString = convertString;","/home/travis/build/npmtest/node-npmtest-csvtojson/node_modules/csvtojson/Gruntfile.js":"/*\n\tGRUNT instructions\n\t1. ensure you have dependencies installed run `npm install` in the root directory of the repo to get dev dependencies\n\t2. run `grunt` in root dir of the repo in a shell to get the watcher started\n\t\tThe watcher looks at files. When a file is added or changed it passes the file through jshint\n\t3. run `grunt test` to execute all unit tests and get output\n\t4. run `grunt jshint` to pass all files through linter\n\n\tMADGE instructions\n\t1. run `npm install -g madge` to get madge executable\n\t2. Insure graphviz is installed and the bin folder is in your path.\n\t3. run `madge -x \"node_modules|util|stream|os|assert|fs|http\" -i graph.png ./` to generate graph.png\n\t\twhich is the dependency graph for the current build.\n*/\n\nmodule.exports = function(grunt) {\n  require('load-grunt-tasks')(grunt);\n  grunt.loadTasks('./devops/grunt-wiki');\n  var files = ['Gruntfile.js', 'libs/**/*.js', 'libs/**/**/*.js', 'test/*.js', 'bin/csvtojson',\n    'bin/csvtojson.js', 'devops/*.js'\n  ];\n  grunt.initConfig({\n    uglify: {\n      client: {\n        options: {\n          mangle: true,\n          banner:\"/*Automatically Generated. Do not modify.*/\\n\"\n        },\n        src: \"./dist/csvtojson.js\",\n        dest: \"./dist/csvtojson.min.js\",\n      }\n    },\n    browserify: {\n      dist: {\n        src: \"./browser_index.js\",\n        dest: \"./dist/csvtojson.js\"\n      }\n    },\n    jshint: {\n      all: {\n        src: files,\n        options: {\n          'globals': { // false makes global variable readonly true is read/write\n            'describe': false,\n            'it': false\n          },\n          // see the docs for full list of options http://jshint.com/docs/options/\n          'bitwise': true,\n          'curly': true,\n          'eqeqeq': true,\n          'forin': true,\n          'freeze': true,\n          'funcscope': true,\n          'futurehostile': true,\n          'latedef': false,\n          'maxcomplexity': 10, // arbitrary but anything over 10 quickly becomes hard to think about\n          'maxdepth': 3, // also arbitrary. Deeply nested functions should be refactored to use helper functions.\n          'maxparams': 4, // arbitrary. Consider using an object literal instead of list of params.\n          'nocomma': true,\n          //'nonew': true, // In the future when all objects are refactored to avoid new.\n          //'strict': true, // in the future when all functions are closer to adhering to strict.\n          'notypeof': true,\n          'undef': true,\n          'unused': true,\n          'node': true // defines node globals\n        }\n      }\n    },\n    mochaTest: {\n      test: {\n        src: [files[3]]\n      }\n    },\n    watch: {\n      files: files,\n      tasks: ['newer:jshint:all', 'mochaTest'],\n      options: {\n        spawn: false,\n        event: ['changed', 'added']\n      }\n    },\n    wiki: {},\n  });\n  grunt.registerTask('default', ['watch']);\n  grunt.registerTask('test', ['mochaTest']);\n  grunt.registerTask(\"build:browser\",[\"browserify:dist\",\"uglify:client\"]);\n};\n"}